function [data,fsrc] = omr_main(fref, fmsk, ftgt, dsrc, Ipages)

% List of selected images in 'dsrc' directory
fimg  = dir(dsrc);
if isempty(fimg)
    disp('TIFF images not found in SRC folder.');
    return
end

imfmt = imformats;
imext = strcat('.',[imfmt.ext]);
Nimg  = length(fimg);
imgOK = false(1,Nimg);
for n = 1:Nimg
    [fpath,fname,fext] = fileparts(fimg(n).name);
    if ismember(fext,imext)
        imgOK(n) = true;
    end
end
fsrc = fimg(imgOK);             % images filename
if isdir(dsrc)
    psrc = dsrc;                % images path
else
    psrc = fileparts(dsrc);     
end

% Number of Reference images 
Nref  = numel(fref);

% Preallocate memory for cell arrays

% Pages to be processed in TIFF files
IpagesALL.num = [];
IpagesALL.idx = [];

% Load Reference and Mask images
% Create single variable to hold pages information    
% Read images
[REF,map]  = imread(fref);                 % reference image
REF        = omr_adjust_image(REF, map);   % convert to intensity image and scale
[MSK,map]  = imread(fmsk);                 % mask image
MSK        = omr_adjust_image(MSK, map);   % convert to intensity image and scale
[TGT,map]  = imread(ftgt);                 % realigment image
TGT        = omr_adjust_image(TGT, map);   % convert to intensity image and scale

% Resize images, if they are too large
if numel(REF) > 1024*800
    gain   = 600/size(REF,1);
    REF = imresize(REF, gain);
end
MSK = imresize(MSK, size(REF));
TGT = imresize(TGT, size(REF));

    % Set spatial location of the REF image in the world: 
    %  - center at (0,0)
    %  - scale to -1:1
[M,N]      = size(REF);
XY(1,:) = [0 M] - M/2;
XY(2,:) = [0 N] - N/2;
XY      = XY / max(XY(:,2));

    % Make binary mask
MSK(MSK<0.5)  = 0;
MSK(MSK>=0.5) = 1;

% Make binary realigment image
TGT(TGT<0.5)  = 0;
TGT(TGT>=0.5) = 1;

% Locate blobs in mask and label them in a meaningful way
BLOBS = omr_mask_labels(MSK);

% Initialize output data structure
data = struct('values', {}, 'labels', {}, 'fval', {});

Nscr = numel(fsrc); % Total number of TIFF files 

for n = 1:Nscr    % Loop over TIFF files    
    % Display some feedback information to the user
    disp(['reading file: ' fsrc(n).name ' (' num2str(n) '/' num2str(Nscr) ')']);
    
    % Read the image from the TIFF file
    [SRC, map] = imread(fullfile(psrc, fsrc(n).name));
    
    th = graythresh(SRC);
    SRC = im2bw(SRC,th); 

    % Convert image to intensity
    SRC = omr_adjust_image(SRC, map);
    
    % Resize SRC to the size of REF
    SRC = imresize(SRC, size(REF));

    imwrite(SRC, 'resize.jpg');
    
    % Realign SRC to the REF image
    [aSRC, P, fval] = omr_realign(SRC, REF, TGT, XY);

    figure, imshow(aSRC);
    
    % Mask source image
    mSRC = ~MSK .* 1-Scale(aSRC);
    
    % Get source image intensity at mask locations
    [values, labels] = omr_values(mSRC, BLOBS);
    
    % Record output data
    data(n).values = values;
    data(n).labels = labels;
    data(n).fval = fval;
    
    % Display some feedback information
    disp([fsrc(n).name ': concluded, fval = ' num2str(fval)]);
end

figure
ax = subplot(1,2,1); imagesc(REF{i); axis image
title('Reference');
ax(2) = subplot(1,2,2); imagesc(MSK{i}); axis image
title('Mask');
linkaxes(ax);


figure
ax = subplot(1,3,1); imagesc(REF), axis image
title('Reference');
ax(2) = subplot(1,3,2); imagesc(SRC), axis image
title('Source Native');
ax(3) = subplot(1,3,3); imagesc(aSRC), axis image
title('Source Realigned');
linkaxes(ax);

end

function output = Scale(input)
% output = Scale(input)
% Perform an affine scaling to put data in range [0-1].
%
% Adapted from Psychtoolbox-3 (http://psychtoolbox.org/)

minval = min(input(:));
maxval = max(input(:));
output = (input - minval) ./ (maxval-minval);

end